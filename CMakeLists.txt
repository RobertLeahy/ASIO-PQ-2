cmake_minimum_required(VERSION 3.5 FATAL_ERROR)
project(asio_pq LANGUAGES C CXX)
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED 1)
set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
add_definitions(-DBOOST_ALL_NO_LIB)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/modules")
find_package(Beast REQUIRED)
find_package(Boost 1.58.0 REQUIRED system)
find_package(Catch REQUIRED)
find_package(Doxygen)
find_package(MParkVariant)
find_package(PostgreSQL REQUIRED)
add_library(Asio INTERFACE)
target_link_libraries(Asio INTERFACE Boost::boost Boost::system)
if(WIN32)
	target_link_libraries(Asio INTERFACE wsock32 ws2_32)
endif()
add_library(PostgreSQL INTERFACE)
target_include_directories(PostgreSQL SYSTEM INTERFACE ${PostgreSQL_INCLUDE_DIRS})
target_link_libraries(PostgreSQL INTERFACE ${PostgreSQL_LIBRARIES})
if(NOT DEFINED ASIO_PQ_TEST_HOST)
	set(ASIO_PQ_TEST_HOST 127.0.0.1)
endif()
if(NOT DEFINED ASIO_PQ_TEST_PORT)
	set(ASIO_PQ_TEST_PORT 5432)
endif()
if(NOT DEFINED ASIO_PQ_TEST_USER)
	set(ASIO_PQ_TEST_USER postgres)
endif()
if(NOT DEFINED ASIO_PQ_TEST_PASSWORD)
	set(ASIO_PQ_TEST_PASSWORD "")
endif()
if(NOT DEFINED ASIO_PQ_TEST_DBNAME)
	set(ASIO_PQ_TEST_DBNAME asio_pq)
endif()
if(NOT DEFINED ASIO_PQ_TEST_BAD_HOST)
	set(ASIO_PQ_TEST_BAD_HOST 127.0.0.1)
endif()
if(NOT DEFINED ASIO_PQ_TEST_BAD_PORT)
	set(ASIO_PQ_TEST_BAD_PORT 5432)
endif()
if(NOT DEFINED ASIO_PQ_TEST_BAD_USER)
	set(ASIO_PQ_TEST_BAD_USER notauser)
endif()
if(NOT DEFINED ASIO_PQ_TEST_BAD_PASSWORD)
	set(ASIO_PQ_TEST_BAD_PASSWORD "")
endif()
if(NOT DEFINED ASIO_PQ_TEST_BAD_DBNAME)
	set(ASIO_PQ_TEST_BAD_DBNAME asio_pq)
endif()
enable_testing()
add_subdirectory(src)
if(DOXYGEN_FOUND)
	if(DOXYGEN_DOT_FOUND)
		set(DOXYGEN_CONFIGURE_HAVE_DOT "HAVE_DOT=YES")
		get_filename_component(DOXYGEN_DOT_PATH "${DOXYGEN_DOT_EXECUTABLE}" DIRECTORY)
		file(TO_NATIVE_PATH "${DOXYGEN_DOT_PATH}" DOXYGEN_DOT_PATH)
		set(DOXYGEN_CONFIGURE_DOT_PATH "DOT_PATH=${DOXYGEN_DOT_PATH}")
	endif()
	configure_file(Doxyfile.in ${CMAKE_BINARY_DIR}/Doxyfile)
	add_custom_target(doc
		${DOXYGEN_EXECUTABLE}
		WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
		COMMENT "Running Doxygen" VERBATIM
	)
endif()
